# Copyright 2021 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "frontend.conf"

appName = "merchandise-in-baggage-frontend"
play.http.router = prod.Routes

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.frontend.FrontendModule"

play.http.filters = play.api.http.EnabledFilters

play.filters.enabled = [
  play.filters.headers.SecurityHeadersFilter,
  com.kenshoo.play.metrics.MetricsFilter,
  uk.gov.hmrc.play.bootstrap.frontend.filters.HeadersFilter,
  uk.gov.hmrc.play.bootstrap.frontend.filters.crypto.SessionCookieCryptoFilter,
  uk.gov.hmrc.play.bootstrap.frontend.filters.deviceid.DeviceIdFilter,
  uk.gov.hmrc.play.bootstrap.filters.LoggingFilter,
  uk.gov.hmrc.play.bootstrap.filters.AuditFilter,
  uk.gov.hmrc.play.bootstrap.frontend.filters.SessionTimeoutFilter,
  play.filters.csrf.CSRFFilter,
  uk.gov.hmrc.play.bootstrap.filters.CacheControlFilter,
  uk.gov.hmrc.play.bootstrap.filters.MDCFilter,
  uk.gov.hmrc.play.bootstrap.frontend.filters.SessionIdFilter
]

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Custom error handler
play.http.errorHandler = "uk.gov.hmrc.merchandiseinbaggage.config.ErrorHandler"

play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"

play.modules.enabled += "uk.gov.hmrc.merchandiseinbaggage.config.MerchandiseInBaggageFrontendConfigModule"

play.filters.headers.contentSecurityPolicy = "default-src 'self' 'unsafe-inline' localhost:9000 localhost:9032 localhost:12345 www.googletagmanager.com www.google-analytics.com data:"

# Play Modules
# ~~~~
# Additional play modules can be added here

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
# Not set here so that MDTP frontends share the same secret key in the local environment
# (see common.conf in frontend-bootstrap).
# In server environments the secret comes from app-config-common
# play.http.secret.key="EQdp1FhTyjA5jSMiALAVwLPI0HCPWL8QjbHhI1KiLjZaGcTV8tHl7t40Ewpam3tW"

microservice {
  metrics {
    graphite {
      host = localhost
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    address-lookup-frontend {
      protocol = http
      host = localhost
      port = 9028
      callback = "http://localhost:8281"
    }

    merchandise-in-baggage {
      protocol = http
      host = localhost
      port = 8280
    }

    payment {
      protocol = http
      host = localhost
      port = 9057
    }

    tps-payments-frontend {
      url = "http://localhost:9124"
    }

    tps-payments-backend {
     protocol = http
     host = localhost
     port = 9125
   }

    auth {
       protocol = http
       host = localhost
       port = 8500
    }

    auditing {
      enabled = true
      traceRequests = true
      consumer {
        baseUri {
          host = localhost
          port = 8100
        }
      }
    }

    feedback-frontend {
      url = "http://localhost:9514/feedback"
    }
  }
}

# try settng jvm = true when/if mongo is removed
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = false
  enabled = true
}

auditing {
  enabled = false
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

google-analytics {
  token = N/A
  host = auto
}

tracking-consent-frontend {
  gtm.container = "b"
}

#play session timeout
session.timeoutSeconds = 3600

contact-frontend {
  host = "http://localhost:9250"
  serviceId = "mib"
}

declarationJourneyTimeToLiveInSeconds = 3600

accessibility-statement.service-path = "/declare-commercial-goods"

mongodb {
  uri = "mongodb://localhost:27017/merchandise-in-baggage-frontend"
}

mongo-async-driver {
  akka {
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    loglevel = "WARNING"
  }
}

payments {
  returnUrl = "http://localhost:8281/declare-commercial-goods/declaration-confirmation"
  backUrl = "http://localhost:8281/declare-commercial-goods/check-your-answers"
}


timeout {
  timeout = 900
  countdown = 120
}

stride {
  roles = ["digital_tps_payment_taker_call_handler", "digital_mib_call_handler"]
}

assistedDigital = false

play.i18n.langs = ["en", "cy"]

features {
  welsh-translation: true
}

tps-navigation {
  back = "http://localhost:8281/declare-commercial-goods/check-your-answers"
  reset = "http://localhost:8281/declare-commercial-goods/reset-service"
  finish = "http://localhost:8281/declare-commercial-goods/declaration-confirmation"
  callback = "http://localhost:9211/payments/notifications/send-card-payments"
}